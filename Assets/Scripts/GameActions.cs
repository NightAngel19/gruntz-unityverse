//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/GameActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameActions"",
    ""maps"": [
        {
            ""name"": ""InGame"",
            ""id"": ""964ec7c5-3953-494d-9a5a-37e7339bab0e"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""938e4eb9-b43e-431d-b5b1-17d3dd2e6cf7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AdditionalSelect"",
                    ""type"": ""Button"",
                    ""id"": ""af7c99b8-9b86-45ca-bb01-5dc0774151ba"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectAll"",
                    ""type"": ""Button"",
                    ""id"": ""5ca4c0ee-4de5-4645-8606-56150e570575"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""3bc64928-1cd8-4aa5-ab40-980fb6bfa2fc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Action"",
                    ""type"": ""Button"",
                    ""id"": ""ef9ea3b1-3197-4165-ae0f-9506499649b9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Give"",
                    ""type"": ""Button"",
                    ""id"": ""219e16dc-18c1-4175-8859-dc5d04e44403"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ForceIdle"",
                    ""type"": ""Button"",
                    ""id"": ""01ecc06a-ef1f-433b-8c45-b6c43bb14896"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SaveGame"",
                    ""type"": ""Button"",
                    ""id"": ""1bd05a8e-ef76-41c2-89b3-5a80a4480a63"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LoadGame"",
                    ""type"": ""Button"",
                    ""id"": ""fb69b610-44ff-439e-af18-f6be369e3572"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""217a9013-9a2f-4343-ae2a-50e9720d4543"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5e1de9bc-afd6-4c5d-9b44-e1b5f936a919"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Left Button [Mouse] + Alt [Keyboard]"",
                    ""id"": ""a0115eee-7405-4226-bebe-b85af6c4e29e"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Give"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""04fffa24-9765-4553-8a4e-3038b178c7d8"",
                    ""path"": ""<Keyboard>/alt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Give"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""37e693c1-0fae-482b-86d3-bfbc3da52c49"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Give"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""444ba4d2-02bf-45aa-b8a5-4ef6a9091427"",
                    ""path"": ""<Keyboard>/f5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SaveGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7cd334ab-6f04-4848-ae34-70a7254bbf51"",
                    ""path"": ""<Keyboard>/f9"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LoadGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e46c7d6a-aea9-419d-b7d5-0a9eecb0d893"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Left Button [Mouse] + Control [Keyboard]"",
                    ""id"": ""c29d4e00-e32a-4dd9-9a90-90c794346332"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AdditionalSelect"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""272a946a-7df4-401c-af57-9d8d2111eca7"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AdditionalSelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""9173cbba-0d7d-474b-b2f9-4a72486906a7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AdditionalSelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Control [Keyboard] + A [Keyboard]"",
                    ""id"": ""625a9cc0-5d11-41f0-b5c7-199d1946dbc7"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectAll"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""ffe8f7e9-b377-42b4-8e96-c7afdc7a0416"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectAll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""23279bf6-3cc4-440d-8aa3-dd6cbfb57f3d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectAll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left Button [Mouse] + Shift [Keyboard]"",
                    ""id"": ""09266187-8b79-46b0-877e-b5c5a2ab6a0c"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""eda5f10e-b7fb-4405-88da-f83421ab8d6a"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""0d167ad0-5b56-44af-8143-5e01dd9ba700"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f0b392bb-060d-4c95-8ec8-5acacf6cfb81"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b32af88f-7016-4b09-87f6-afc14693bbc4"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForceIdle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GameManager"",
            ""id"": ""10bf3e63-b94b-4e21-9472-bb408a3b4a5b"",
            ""actions"": [
                {
                    ""name"": ""LoadStatzMenu"",
                    ""type"": ""Button"",
                    ""id"": ""f154a9b6-6f09-491a-b51f-6f86d282c4be"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ecc47aa6-cd0c-44c6-9908-aaa4c154e8ca"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LoadStatzMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // InGame
        m_InGame = asset.FindActionMap("InGame", throwIfNotFound: true);
        m_InGame_Select = m_InGame.FindAction("Select", throwIfNotFound: true);
        m_InGame_AdditionalSelect = m_InGame.FindAction("AdditionalSelect", throwIfNotFound: true);
        m_InGame_SelectAll = m_InGame.FindAction("SelectAll", throwIfNotFound: true);
        m_InGame_Move = m_InGame.FindAction("Move", throwIfNotFound: true);
        m_InGame_Action = m_InGame.FindAction("Action", throwIfNotFound: true);
        m_InGame_Give = m_InGame.FindAction("Give", throwIfNotFound: true);
        m_InGame_ForceIdle = m_InGame.FindAction("ForceIdle", throwIfNotFound: true);
        m_InGame_SaveGame = m_InGame.FindAction("SaveGame", throwIfNotFound: true);
        m_InGame_LoadGame = m_InGame.FindAction("LoadGame", throwIfNotFound: true);
        m_InGame_Escape = m_InGame.FindAction("Escape", throwIfNotFound: true);
        // GameManager
        m_GameManager = asset.FindActionMap("GameManager", throwIfNotFound: true);
        m_GameManager_LoadStatzMenu = m_GameManager.FindAction("LoadStatzMenu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InGame
    private readonly InputActionMap m_InGame;
    private List<IInGameActions> m_InGameActionsCallbackInterfaces = new List<IInGameActions>();
    private readonly InputAction m_InGame_Select;
    private readonly InputAction m_InGame_AdditionalSelect;
    private readonly InputAction m_InGame_SelectAll;
    private readonly InputAction m_InGame_Move;
    private readonly InputAction m_InGame_Action;
    private readonly InputAction m_InGame_Give;
    private readonly InputAction m_InGame_ForceIdle;
    private readonly InputAction m_InGame_SaveGame;
    private readonly InputAction m_InGame_LoadGame;
    private readonly InputAction m_InGame_Escape;
    public struct InGameActions
    {
        private @GameActions m_Wrapper;
        public InGameActions(@GameActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select => m_Wrapper.m_InGame_Select;
        public InputAction @AdditionalSelect => m_Wrapper.m_InGame_AdditionalSelect;
        public InputAction @SelectAll => m_Wrapper.m_InGame_SelectAll;
        public InputAction @Move => m_Wrapper.m_InGame_Move;
        public InputAction @Action => m_Wrapper.m_InGame_Action;
        public InputAction @Give => m_Wrapper.m_InGame_Give;
        public InputAction @ForceIdle => m_Wrapper.m_InGame_ForceIdle;
        public InputAction @SaveGame => m_Wrapper.m_InGame_SaveGame;
        public InputAction @LoadGame => m_Wrapper.m_InGame_LoadGame;
        public InputAction @Escape => m_Wrapper.m_InGame_Escape;
        public InputActionMap Get() { return m_Wrapper.m_InGame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InGameActions set) { return set.Get(); }
        public void AddCallbacks(IInGameActions instance)
        {
            if (instance == null || m_Wrapper.m_InGameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InGameActionsCallbackInterfaces.Add(instance);
            @Select.started += instance.OnSelect;
            @Select.performed += instance.OnSelect;
            @Select.canceled += instance.OnSelect;
            @AdditionalSelect.started += instance.OnAdditionalSelect;
            @AdditionalSelect.performed += instance.OnAdditionalSelect;
            @AdditionalSelect.canceled += instance.OnAdditionalSelect;
            @SelectAll.started += instance.OnSelectAll;
            @SelectAll.performed += instance.OnSelectAll;
            @SelectAll.canceled += instance.OnSelectAll;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Action.started += instance.OnAction;
            @Action.performed += instance.OnAction;
            @Action.canceled += instance.OnAction;
            @Give.started += instance.OnGive;
            @Give.performed += instance.OnGive;
            @Give.canceled += instance.OnGive;
            @ForceIdle.started += instance.OnForceIdle;
            @ForceIdle.performed += instance.OnForceIdle;
            @ForceIdle.canceled += instance.OnForceIdle;
            @SaveGame.started += instance.OnSaveGame;
            @SaveGame.performed += instance.OnSaveGame;
            @SaveGame.canceled += instance.OnSaveGame;
            @LoadGame.started += instance.OnLoadGame;
            @LoadGame.performed += instance.OnLoadGame;
            @LoadGame.canceled += instance.OnLoadGame;
            @Escape.started += instance.OnEscape;
            @Escape.performed += instance.OnEscape;
            @Escape.canceled += instance.OnEscape;
        }

        private void UnregisterCallbacks(IInGameActions instance)
        {
            @Select.started -= instance.OnSelect;
            @Select.performed -= instance.OnSelect;
            @Select.canceled -= instance.OnSelect;
            @AdditionalSelect.started -= instance.OnAdditionalSelect;
            @AdditionalSelect.performed -= instance.OnAdditionalSelect;
            @AdditionalSelect.canceled -= instance.OnAdditionalSelect;
            @SelectAll.started -= instance.OnSelectAll;
            @SelectAll.performed -= instance.OnSelectAll;
            @SelectAll.canceled -= instance.OnSelectAll;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Action.started -= instance.OnAction;
            @Action.performed -= instance.OnAction;
            @Action.canceled -= instance.OnAction;
            @Give.started -= instance.OnGive;
            @Give.performed -= instance.OnGive;
            @Give.canceled -= instance.OnGive;
            @ForceIdle.started -= instance.OnForceIdle;
            @ForceIdle.performed -= instance.OnForceIdle;
            @ForceIdle.canceled -= instance.OnForceIdle;
            @SaveGame.started -= instance.OnSaveGame;
            @SaveGame.performed -= instance.OnSaveGame;
            @SaveGame.canceled -= instance.OnSaveGame;
            @LoadGame.started -= instance.OnLoadGame;
            @LoadGame.performed -= instance.OnLoadGame;
            @LoadGame.canceled -= instance.OnLoadGame;
            @Escape.started -= instance.OnEscape;
            @Escape.performed -= instance.OnEscape;
            @Escape.canceled -= instance.OnEscape;
        }

        public void RemoveCallbacks(IInGameActions instance)
        {
            if (m_Wrapper.m_InGameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInGameActions instance)
        {
            foreach (var item in m_Wrapper.m_InGameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InGameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InGameActions @InGame => new InGameActions(this);

    // GameManager
    private readonly InputActionMap m_GameManager;
    private List<IGameManagerActions> m_GameManagerActionsCallbackInterfaces = new List<IGameManagerActions>();
    private readonly InputAction m_GameManager_LoadStatzMenu;
    public struct GameManagerActions
    {
        private @GameActions m_Wrapper;
        public GameManagerActions(@GameActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @LoadStatzMenu => m_Wrapper.m_GameManager_LoadStatzMenu;
        public InputActionMap Get() { return m_Wrapper.m_GameManager; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameManagerActions set) { return set.Get(); }
        public void AddCallbacks(IGameManagerActions instance)
        {
            if (instance == null || m_Wrapper.m_GameManagerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameManagerActionsCallbackInterfaces.Add(instance);
            @LoadStatzMenu.started += instance.OnLoadStatzMenu;
            @LoadStatzMenu.performed += instance.OnLoadStatzMenu;
            @LoadStatzMenu.canceled += instance.OnLoadStatzMenu;
        }

        private void UnregisterCallbacks(IGameManagerActions instance)
        {
            @LoadStatzMenu.started -= instance.OnLoadStatzMenu;
            @LoadStatzMenu.performed -= instance.OnLoadStatzMenu;
            @LoadStatzMenu.canceled -= instance.OnLoadStatzMenu;
        }

        public void RemoveCallbacks(IGameManagerActions instance)
        {
            if (m_Wrapper.m_GameManagerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameManagerActions instance)
        {
            foreach (var item in m_Wrapper.m_GameManagerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameManagerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameManagerActions @GameManager => new GameManagerActions(this);
    public interface IInGameActions
    {
        void OnSelect(InputAction.CallbackContext context);
        void OnAdditionalSelect(InputAction.CallbackContext context);
        void OnSelectAll(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnAction(InputAction.CallbackContext context);
        void OnGive(InputAction.CallbackContext context);
        void OnForceIdle(InputAction.CallbackContext context);
        void OnSaveGame(InputAction.CallbackContext context);
        void OnLoadGame(InputAction.CallbackContext context);
        void OnEscape(InputAction.CallbackContext context);
    }
    public interface IGameManagerActions
    {
        void OnLoadStatzMenu(InputAction.CallbackContext context);
    }
}
